{"version":3,"sources":["components/CustomMessage.js","components/CustomHome.js","context/PostContext.js","pages/Home.js","components/CustomLogin.js","components/CustomHeader.js","pages/Login.js","components/CustomSignUpForm.js","pages/SignUpForm.js","components/CustomTextArea.js","pages/Post.js","Routes.js","App.js","context/Provider.js","index.js","service/auth.js","helpers/localStorageHelper.js"],"names":["CustomMessage","children","Message","CustomHome","id","text","author","upCount","downCount","createdAt","updateCount","votes","useState","voteState","setVoteState","handler","setHandler","history","useHistory","upVotes","a","fetchUpVotes","data","status","push","requestUserId","fetchUserId","idUser","map","userId","useEffect","handlerClickUp","postId","fetchPostVotes","handlerClickDown","Grid","textAlign","style","lineHeight","verticalAlign","Column","maxWidth","fontSize","fontWeight","fontFamily","marginTop","idVote","up","to","onClick","event","preventDefault","className","marginRight","down","downVotes","PostContext","createContext","Home","useContext","loading","setLoading","post","setPost","allPost","setTimeout","getToken","fetchAllPost","content","height","display","justifyContent","localStorage","clear","width","CustomLogin","formData","userName","password","onInputChange","onHandleSubmit","Form","size","Segment","stacked","Input","fluid","icon","iconPosition","placeholder","name","value","onChange","e","type","Button","color","CustomHeader","message","Header","as","Login","Map","setFormData","handleInputChange","useCallback","target","prevState","set","handleSubmit","username","get","fetchToken","SignUpForm","SignUp","fetchSignUp","CustomSignUpForm","CustomTextArea","postData","TextArea","Post","setPostData","fetchPostInit","Router","exact","path","component","App","Routes","Provider","props","context","ReactDOM","render","forceRefresh","document","getElementById","url","requestTokenUrl","request","method","headers","Buffer","from","toString","body","fetch","response","json","access_token","alert","saveToken","signUpNewUserUrl","requestBody","axios","console","log","fields","title","forEach","baseUrl","token","requestHeaders","undefined","vote","authorization","error_description","setItem","JSON","stringify","parse","getItem"],"mappings":"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","file":"static/js/main.0b34edcb.chunk.js","sourcesContent":["import React from \"react\";\nimport { Message } from \"semantic-ui-react\";\n\nconst CustomMessage = ({ children }) => {\n  return <Message>{children}</Message>;\n};\n\nexport default CustomMessage;\n","import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { fetchUpVotes, fetchPostVotes, fetchUserId } from '../service/auth';\nimport { Grid } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nconst CustomHome = ({ id, text, author, upCount, downCount, createdAt, updateCount, votes }) => {\n  const[voteState, setVoteState] = useState([]);\n  const[handler, setHandler] = useState(false);\n  const history = useHistory();\n  \n  const upVotes = async () => {\n  const data = await fetchUpVotes();\n  if (data.status === 401) history.push(\"/login\");\n  setVoteState(data)\n  }\n\n  const requestUserId = async () => {\n    const idUser = await fetchUserId();\n    setHandler(true);\n    votes.map(({ userId: voteUserId }) => {\n      if (voteUserId === idUser) setHandler(false);\n    });\n  }\n\n  useEffect(() => {\n    requestUserId()\n    updateCount();\n    upVotes();\n  }, []);\n\n  const handlerClickUp = async (postId) => {\n    const response = await fetchPostVotes(postId, \"up\");\n    if (response.status === 401) history.push(\"/login\");\n    updateCount();\n    upVotes();\n  };\n\n  const handlerClickDown = async(postId) => {\n    const response = await fetchPostVotes(postId, \"down\");\n    if (response.status === 401) history.push(\"/login\");\n    updateCount();\n    upVotes();\n};\n\n  return (\n    <Grid\n      textAlign=\"center\"\n      style={{ lineHeight: 1 }}\n      verticalAlign=\"middle\"\n    >    \n      <Grid.Column style={{ maxWidth: 500 }}>\n        <p>{ createdAt }</p>\n        <span \n          style={{ fontSize: 15, fontWeight: 600 }}\n        >\n          Author: { author }\n        </span>\n        <p \n          style={{ fontSize: 16, fontFamily: \"monospace\", marginTop: 10 }}\n        >\n          {text}\n        </p>\n\n        { voteState&&voteState.map(({ id: idVote, postId, upVotes: up }) => (\n          <Link          \n            to=\"\"\n            key={idVote}\n            style={{ fontSize: 25}}\n            onClick={(event) => {\n              event.preventDefault();\n              if (!up) handlerClickUp(postId);                \n            } }\n          >\n            { id === postId ? <i className={ up ? \"thumbs up icon\" \n            : \"thumbs up outline icon\" }></i> : '' }\n          </Link>          \n        )) }\n\n        <Link\n            to=\"\"\n            style={{ fontSize: 25}}            \n            onClick={(event) => {\n              setHandler(false)\n              event.preventDefault();\n              handlerClickUp(id);\n            } }                \n            >\n            {handler ? <i className=\"thumbs up outline icon\"></i> : '' }\n          </Link>\n        <span \n          style={{ fontSize: 20, marginRight: 40, fontWeight: 600 }}\n        >\n          { upCount }\n        </span>\n\n\n        { voteState&&voteState.map(({ id: idVote, postId, downVotes: down, upVotes: up }) => (\n          <Link\n            to=\"\"\n            style={{ fontSize: 25}}\n            key={idVote}            \n            onClick={(event) => {\n              event.preventDefault();\n              if (!down) handlerClickDown(postId);                \n            } }\n          >\n            { id === postId ? <i className={ down ? \"thumbs down icon\" \n            : \"thumbs down outline icon\" }></i> : \"\"}\n          </Link>\n        )) }\n\n          <Link\n            to=\"\"\n            style={{ fontSize: 25}}            \n            onClick={(event) => {\n              setHandler(false)\n              event.preventDefault();\n              handlerClickDown(id);\n            } }                \n            >\n            {handler ?  <i className=\"thumbs down outline icon\"></i> : '' }\n          </Link>\n        <span\n          style={{ fontSize: 20, fontWeight: 600 }}\n        >\n          { downCount }\n        </span>\n    </Grid.Column>\n  </Grid>\n  );\n}\n\nexport default CustomHome;","import { createContext } from 'react';\n\nconst PostContext = createContext();\n\nexport default PostContext;","import React, { useEffect, useState, useContext } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { fetchAllPost } from '../service/auth';\nimport CustomMessage from '../components/CustomMessage';\nimport CustomHome from '../components/CustomHome';\nimport { getToken } from '../helpers/localStorageHelper';\nimport PostContext from '../context/PostContext';\n\nexport default function Home() {\n  const { loading, setLoading } = useContext(PostContext);\n  const[post, setPost] = useState([]);\n  const history = useHistory();\n\n  useEffect(() => {\n    setLoading(true)\n    allPost();\n    setTimeout(() => setLoading(false), 1000);\n  }, []);\n\n  if (!getToken()) return history.push(\"/login\")\n\n  const allPost = async () => {\n    const { content }  = await fetchAllPost();\n    setPost(content);\n  }\n\n  const logoutFunction = () => {\n    localStorage.clear();\n  }\n\n  if (loading) {\n    return (\n    <div\n      style= {{ height: 500 }}\n      className=\"ui segment\"\n    >\n      <div className=\"ui active inverted dimmer\">\n        <div className=\"ui large text loader\">Loading</div>\n      </div>\n    </div>\n    );\n  }    \n\n  return (\n    <div>\n      <CustomMessage>\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n         <Link \n            to=\"/post\"\n            style={{ fontSize: 16 }}\n          >\n            Start a post? \n          </Link>\n          <Link \n            to=\"/login\"\n            style={{ fontSize: 16 }}\n            onClick={logoutFunction}\n          >\n            Logout\n          </Link>\n        </div>\n      </CustomMessage>\n      {post&&post.map(({ id, text, author, upCount, downCount, createdAt, votes }) => (\n        <div\n          style={{ width: '80vh' }}\n          className=\"ui raised very padded text container segment\"\n          key={id}\n        >\n          <CustomHome \n            id={id}\n            text={text}\n            author={author}\n            upCount={upCount}\n            downCount={downCount}\n            createdAt={createdAt}\n            updateCount={allPost}\n            votes={votes}\n          />\n          \n        </div>\n      ))}\n    </div>\n  );\n}\n","import 'semantic-ui-css/semantic.min.css';\nimport React from 'react';\nimport { Button, Form, Segment } from 'semantic-ui-react';\n\nconst CustomLogin = ({\n  formData: { userName, password },\n  onInputChange,\n  onHandleSubmit,\n}) => (\n  <Form size=\"large\">\n    <Segment stacked>\n      <Form.Input\n        fluid\n        icon=\"user\"\n        iconPosition=\"left\"\n        placeholder=\"Username\"\n        name=\"username\"\n        value={userName}\n        onChange={(e) => onInputChange(e)}\n      />\n      <Form.Input\n        fluid\n        icon=\"lock\"\n        iconPosition=\"left\"\n        placeholder=\"Password\"\n        type=\"password\"\n        name=\"password\"\n        value={password}\n        onChange={(e) => onInputChange(e)}\n      />\n\n      <Button\n        color=\"blue\"\n        fluid\n        size=\"large\"\n        onClick={async () => await onHandleSubmit()}\n      >\n        Login\n      </Button>\n    </Segment>\n  </Form>\n);\n\nexport default CustomLogin;\n","import React from 'react';\nimport { Header } from 'semantic-ui-react';\n\nconst CustomHeader = ({ message }) => {\n  return (\n    <Header as=\"h2\" color=\"blue\" textAlign=\"center\">\n      {message}\n    </Header>\n  );\n};\n\nexport default CustomHeader;\n","import React, { useState, useCallback, useContext, useEffect } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport CustomLogin from '../components/CustomLogin';\nimport { Grid } from 'semantic-ui-react';\nimport CustomHeader from '../components/CustomHeader';\nimport { fetchToken } from '../service/auth';\nimport  CustomMessage from '../components/CustomMessage';\nimport PostContext from '../context/PostContext';\n\nexport default function Login() {\n  const { loading, setLoading } = useContext(PostContext);\n  const history = useHistory();\n  const [formData, setFormData] = useState(new Map());\n\n  useEffect(() => {\n    setLoading(true);\n    setTimeout(() => setLoading(false), 1000);\n  }, []);\n\n  const handleInputChange = useCallback(({ target: { name, value } }) => {\n    setFormData(prevState => {\n      return new Map(prevState).set(name, value);\n    });\n  }, []);\n\n  const handleSubmit = async () => {\n    const username = formData.get('username');\n    const password = formData.get('password');\n    const loginResponse = await fetchToken(username, password);\n    if (loginResponse) return history.push('/home')\n    //history.push('/');\n  };\n\n  if (loading) {\n    return (\n    <div\n      style= {{ height: 500 }}\n      className=\"ui segment\"\n    >\n      <div className=\"ui active inverted dimmer\">\n        <div className=\"ui large text loader\">Loading</div>\n      </div>\n    </div>\n    );\n  }    \n\n    return (\n      <Grid\n        textAlign=\"center\"\n        style={{ height: '100vh' }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 500 }}>\n          <CustomHeader message=\"Segware Login\" />\n\n          <CustomLogin\n            formData={formData}\n            onInputChange={handleInputChange}\n            onHandleSubmit={handleSubmit}\n          />\n          <CustomMessage>\n          Already registered? <Link to=\"/\">Sing Up</Link>\n          </CustomMessage>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n","import 'semantic-ui-css/semantic.min.css';\nimport React from 'react';\nimport { Button, Form, Segment } from 'semantic-ui-react';\n\nconst SignUpForm = ({\n  formData: { name, userName, password },\n  onInputChange,\n  onHandleSubmit,\n}) => (\n  <Form size=\"large\">\n    <Segment stacked>\n    <Form.Input\n        fluid\n        placeholder=\"Name\"\n        value={name}\n        name=\"name\"\n        onChange={(e) => onInputChange(e)}\n      />\n      <Form.Input\n        fluid\n        placeholder=\"Username\"\n        value={userName}\n        name=\"username\"\n        onChange={(e) => onInputChange(e)}\n      />\n      <Form.Input\n        fluid\n        placeholder=\"Password\"\n        value={password}\n        type=\"password\"\n        name=\"password\"\n        onChange={(e) => onInputChange(e)}\n      />\n\n      <Button color=\"blue\" fluid size=\"large\" onClick={async () => await onHandleSubmit()}>\n        Register\n      </Button>\n    </Segment>\n  </Form>\n);\n\nexport default SignUpForm;\n","import React, { useState, useCallback, useContext, useEffect } from 'react';\nimport  CustomMessage from '../components/CustomMessage';\nimport  CustomHeader from '../components/CustomHeader';\nimport  CustomSignUpForm from '../components/CustomSignUpForm';\nimport { Grid } from 'semantic-ui-react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { fetchSignUp } from '../service/auth';\nimport PostContext from '../context/PostContext';\n\nexport default function SignUp() {\n  const { loading, setLoading } = useContext(PostContext);\n  const [formData, setFormData] = useState(new Map());\n  const history = useHistory();\n\n  useEffect(() => {\n    setLoading(true);\n    setTimeout(() => setLoading(false), 1000);\n  }, []);\n\n  const handleSubmit = async () => {\n    const name = formData.get('name');\n    const username = formData.get('username');\n    const password = formData.get('password');\n    const registerResponse = await fetchSignUp(name, username, password);\n    if (registerResponse === 201) history.push('/login'); \n  };\n\n  const handleInputChange = useCallback(({ target: { name, value } }) => {\n    setFormData(prevState => {\n      return new Map(prevState).set(name, value);\n    });\n  }, []);\n\n  if (loading) {\n    return (\n    <div\n      style= {{ height: 500 }}\n      className=\"ui segment\"\n    >\n      <div className=\"ui active inverted dimmer\">\n        <div className=\"ui large text loader\">Loading</div>\n      </div>\n    </div>\n    );\n  }    \n\n    return (\n      <Grid\n        textAlign=\"center\"\n        style={{ height: '100vh' }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <CustomHeader message=\"Segware Register\" />\n          <CustomSignUpForm\n            formData={formData}\n            onInputChange={handleInputChange}\n            onHandleSubmit={handleSubmit}\n          />\n          <CustomMessage>\n            Alaready have account? <Link to=\"/login\">Sing In</Link>\n          </CustomMessage>\n        </Grid.Column>\n      </Grid>\n    );\n}\n","import 'semantic-ui-css/semantic.min.css';\nimport React from 'react';\nimport { Button, Form, Segment } from 'semantic-ui-react';\n\nconst CustomTextArea = ({\n  postData: { text },\n  onInputChange,\n  onHandleSubmit,\n}) => (\n  <Form size=\"large\">\n    <Segment stacked>\n    <Form.TextArea\n        fluid=\"true\"\n        placeholder=\"Write a post\"\n        value={text}\n        name=\"text\"\n        onChange={(e) => onInputChange(e)}\n      />\n\n      <Button color=\"blue\" fluid size=\"large\" onClick={async () => await onHandleSubmit()}>\n       Post\n      </Button>\n    </Segment>\n  </Form>\n);\n\nexport default CustomTextArea;\n","import React, { useState, useCallback, useContext, useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport { Link, useHistory } from 'react-router-dom';\nimport CustomMessage from '../components/CustomMessage';\nimport CustomTextArea from '../components/CustomTextArea';\nimport CustomHeader from '../components/CustomHeader'\nimport { fetchPostInit } from '../service/auth';\nimport { getToken } from '../helpers/localStorageHelper';\nimport PostContext from '../context/PostContext';\n\n\nexport default function Post() {\n  const { loading, setLoading } = useContext(PostContext);\n  const [postData, setPostData] = useState(new Map());\n  const history = useHistory();\n\n  useEffect(() => {\n    setLoading(true);\n    setTimeout(() => setLoading(false), 1000);\n  }, [])\n\n  const handleInputChange = useCallback(({ target: { name, value } }) => {\n    setPostData(prevState => {\n      return new Map(prevState).set(name, value);\n    });\n  }, []);\n\n  if (!getToken()) return history.push(\"/login\")\n\n  const handleSubmit = async () => {\n    const text = postData.get('text');\n    await fetchPostInit(text);\n    history.push('/home');    \n  };\n\n  if (loading) {\n    return (\n    <div\n      style= {{ height: 500 }}\n      className=\"ui segment\"\n    >\n      <div className=\"ui active inverted dimmer\">\n        <div className=\"ui large text loader\">Loading</div>\n      </div>\n    </div>\n    );\n  }    \n\n  return (\n    <div className=\"ui raised very padded text container segment\">\n      <CustomMessage>\n        <Link to=\"/home\">Back to posts</Link>\n      </CustomMessage>\n      <Grid\n        textAlign=\"center\"\n        style={{ height: '70vh' }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <CustomHeader message=\"Post a text\" />\n          <CustomTextArea\n            postData={postData}\n            onInputChange={handleInputChange}\n            onHandleSubmit={handleSubmit}\n          />\n        </Grid.Column>\n      </Grid>\n    </div>\n  )\n}","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport SignUpForm from './pages/SignUpForm';\nimport Post from './pages/Post';\n\nconst Router = () => (\n  <Switch>\n    <Route exact path=\"/\" component={SignUpForm} />\n    <Route exact path=\"/login\" component={Login} />\n    <Route exact path=\"/home\" component={Home} />\n    <Route exact path=\"/post\" component={Post} />\n  </Switch>\n);\n\nexport default Router;\n","import React from 'react';\nimport Routes from './Routes';\n\nconst App = () => (\n    <Routes />\n);\n  \nexport default App;\n","import React, { useState } from 'react';\nimport PostContext from './PostContext';\n\nexport default function Provider(props) {\n  const [loading, setLoading] = useState();\n\n\n  const context = {\n    loading,\n    setLoading,\n  };\n  \n  const { children } = props;\n\n  return (\n    <PostContext.Provider\n      value={ context }\n    >\n      {children}\n    </PostContext.Provider>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport Provider from './context/Provider';\n\nReactDOM.render(\n  <BrowserRouter forceRefresh>\n    <Provider>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n","import axios from 'axios';\nimport { saveToken, getToken } from '../helpers/localStorageHelper';\n\nconst url = \"https://segware-post.herokuapp.com\"\nexport async function fetchToken(username, password) {\n    const requestTokenUrl = `${url}/oauth/token`;\n\n  const request = {  \n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': 'Basic ' + Buffer.from('admin:admin').toString('base64')\n    },\n    body: 'grant_type=password'\n      + '&username=' + username\n      + '&password=' + password,\n  };\n\n  try {\n    const response = await fetch(requestTokenUrl, request);\n    const { access_token } = await response.json();\n    if (!access_token) return alert(\"No Username or Invalid Password!\")\n    saveToken(access_token);\n    return access_token;\n  }catch(error) {\n    if (!error.response) return alert(\"Internal server error! Code: 500\");\n    const { data } = error.response;\n    if (error) alert(data);\n  }\n}\n\nexport async function fetchSignUp(name, username, password) {\n    const signUpNewUserUrl = `${url}/api/v1/user`;\n\n  const requestBody = { \n    name,\n    username,\n    password\n  };\n  \n  try {\n    const response = await axios.post(signUpNewUserUrl, requestBody);\n    console.log(response)\n    const { data: { message } } = response\n    alert(message);\n    return response.status;\n    \n  }catch(error) {\n    if (!error.response) return alert(\"Internal server error! Code: 500\");\n    const { data } = error.response;\n\n    if (!data.fields) return alert(data.title)\n\n    if (error) {\n      data.fields.forEach(({ name, message }) => {\n        alert(name + \" > \" + message );\n      });\n    }\n  }\n}\n\nexport async function fetchAllPost() {\n  const baseUrl = `${url}/api/v1/post`;\n  const token = getToken();\n\n  const request = {  \n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token\n    },\n  };\n\n  try {\n    const response = await fetch(baseUrl, request);\n    return response.json()\n  }catch(error) {\n    if (error) return alert('Invalid token or list not found!');\n  };\n\n}\n\nexport async function fetchUpVotes() {\n  const baseUrl = `${url}/api/v1/userUpVotes`;\n  const token = getToken();\n\n  const request = {  \n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token\n    },\n  };\n\n  try {\n    const response = await fetch(baseUrl, request);\n      return response.json();\n  }catch(error) {\n    if (error) return alert('Invalid token or list not found!');\n  };\n\n}\n\nexport async function fetchPostInit(text) {\n  const baseUrl = `${url}/api/v1/post`;\n  const token = getToken();\n  const requestHeaders = {\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token\n    },\n  };\n  \n  const requestBody = {\n    text,\n  }\n\n  try {\n    const response = await axios.post(baseUrl, requestBody, requestHeaders);\n    alert(response.data.message);\n    \n  }catch(error) {\n    if (!error.response) return alert('Invalid token or list not found!');\n    const { data } = error.response;\n\n    if (!data.fields) return alert(data.title === undefined \n      ? 'Invalid token or list not found!' : data.title)\n\n    if (error) {\n      data.fields.forEach(({ name, message }) => {\n        alert(name + \" > \" + message );\n      });\n    }\n  };\n\n}\n\nexport async function fetchPostVotes(postId, vote) {\n  const baseUrl = `${url}/api/v1/post/${postId}/${vote}`;\n  const token = getToken();\n  const requestHeaders = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: 'Bearer ' + token\n    },\n  };\n\n  try {\n    const response = await fetch(baseUrl, requestHeaders);\n    return response;\n  }catch(error) {\n    if (!error.response) return alert('Invalid token or list not found!');\n    const { data } = error.response;\n\n    if (!data.fields) return alert(data.error_description);\n  };\n\n}\n\nexport async function fetchUserId() {\n  const baseUrl = `${url}/api/v1/userId`;\n  const token = getToken();\n\n  const request = {  \n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token\n    },\n  };\n\n  try {\n    const response = await fetch(baseUrl, request);\n      return response.json();\n  }catch(error) {\n    if (error) return alert('Invalid token or list not found!');\n  };\n\n}\n","\nexport const saveToken = (token) => localStorage.setItem(\n    'token', JSON.stringify(token),\n  );\n  \nexport const getToken = () => JSON.parse(localStorage.getItem('token'));\n"],"sourceRoot":""}